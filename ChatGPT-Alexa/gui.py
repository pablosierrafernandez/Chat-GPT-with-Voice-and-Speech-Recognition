
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import datetime
import threading
import tkinter
from tkinter import messagebox
from tkinter.tix import ComboBox
from tkinter.ttk import Combobox
import speech_recognition as sr
import pyaudio as ptg
from imports.auth import * # * --> all
import openai
import pyttsx3
import sqlite3
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import BOTTOM, GROOVE, RIGHT, Frame, Label, Scrollbar, Tk, Canvas, Entry, Text, Button, PhotoImage, TkVersion, Toplevel
key_entry=None
lang_combo=None
new_lang="es-Es"
r=sr.Recognizer()
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\ajenj\Documents\GitHub\ChatAlexa\ChatGPT-Alexa\assets\frame0")

boton_close=False
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


############################## CENTINELA DE INICIO
def antes_chatear():
    global boton_close
    
    if boton_close==True:
        boton_close=False
    else:
        print("hola")
        boton_close=True
        threading.Thread(target=chatear).start()
        print("hola2")
def chatear():
    global api_key
    global new_lang
    
    openai.api_key=api_key
   
    global boton_close
    conversation=""
    engine=pyttsx3.init()
    var_voice=0
    if new_lang=='en-Us':
        var_voice=1
    engine.setProperty('voice',var_voice)
    engine.setProperty('rate',150)

    miConexion=sqlite3.connect("chat.bd")
    miCursor=miConexion.cursor()
    try:
        miCursor.execute("CREATE TABLE HISTORIAL(ID INTEGER PRIMARY KEY AUTOINCREMENT, PREGUNTA TEXT, RESPUESTA TEXT, FECHA DATETIME)")
    except:
        pass
        while(boton_close):
            with sr.Microphone() as source:
                r.adjust_for_ambient_noise(source,duration=2)
                if boton_close==False:
                    return 0
                print("Escuchando...")
                if boton_close==False:
                    return 0
                audio=r.listen(source)
                if boton_close==False:
                    return 0
                text=str(r.recognize_google(audio,language=new_lang))
                entry_text_2.set(text)
                conversation+="\Humano: "+text+"\nAI: "
                conversation=conversation.strip()
                try:
                    response=openai.Completion.create(engine="text-davinci-003",prompt=conversation,temperature=0.9,max_tokens=150,top_p=1,frequency_penalty=0,presence_penalty=0.6, stop=["\n","Humano","AI"])
                except openai.error.AuthenticationError:
                    tkinter.messagebox.showerror(title=None, message="La API no es valida")
                    return 0
                if boton_close==False:
                    return 0
                answer=response.choices[0].text
                conversation+=answer
                entry_text_1.set(answer)
                fecha=datetime.datetime.fromtimestamp(response.created).strftime('%H:%M:%S')
                entry_text_1_fecha.set(fecha)
                print(f"AI ({fecha}): {answer}\n")
                engine.say(answer)
                engine.runAndWait()
                
                miCursor.execute("INSERT INTO HISTORIAL (PREGUNTA, RESPUESTA, FECHA) VALUES(?, ?, ?)",(text,answer,datetime.datetime.fromtimestamp(response.created)))
            
            
                print("No reconozco tu voz")
        
        
        print("\nHasta pronto!")
window = Tk()

window.geometry("745x501")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 501,
    width = 745,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_text(
    189.0,
    34.0,
    anchor="nw",
    text="Bienvenido",
    fill="#000000",
    font=("Inter Bold", 24 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    373.0,
    176.5,
    image=entry_image_1
)
entry_text_1_fecha=tkinter.StringVar()
entry_1_fecha = Entry(
    bd=0,
    bg="#81c9fa",
    fg="#000716",
    highlightthickness=0,
    textvariable=entry_text_1_fecha
)
entry_1_fecha.place(
    x=197.0,
    y=100.0,
    width=80.0,
    height=30.0
)

scrollbar = Scrollbar(orient="horizontal")
scrollbar.pack()

entry_text_1=tkinter.StringVar()
entry_1 = Entry(
    bd=0,
    bg="#F9F9F9",
    fg="#000716",
    highlightthickness=0,
    textvariable=entry_text_1,
    
)

entry_1.place(
    x=197.0,
    y=128.0,
    width=352.0,
    height=95.0
)



entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    395.0,
    367.0,
    image=entry_image_2
)
entry_text_2=tkinter.StringVar()
entry_2 = Entry(
    bd=0,
    bg="#F9F9F9",
    fg="#000716",
    highlightthickness=0,
    textvariable=entry_text_2
)
entry_2.place(
    x=219.0,
    y=317.0,
    width=352.0,
    height=98.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    115.0,
    176.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    borderwidth=0,
    background='black',
    highlightthickness=0,
    command=antes_chatear,
    relief="flat"
)
button_1.place(
    x=595.0,
    y=309.0,
    width=108.0,
    height=108.0
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    649.0,
    363.0,
    image=image_image_2
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    relief="flat"
)
button_2.place(
    x=649.0,
    y=29.0,
    width=48.0,
    height=48.0
)
def open_config():
    global key_entry
    global lang_combo
    config_window=Toplevel(window)
    config_window.title("Configuracion")
    config_frame=Frame(config_window,relief=GROOVE)
    config_frame.pack(padx=10,pady=10)
    
    key_label=Label(config_frame,text="API KEY")
    key_label.grid(row=0,column=0, padx=10,pady=10,sticky="we")
    key_entry=Entry(config_frame)
    key_entry.insert(0,api_key)
    key_entry.grid(row=0,column=1, padx=10,pady=10,sticky="we")
    
    lang_label=Label(config_frame,text="Idioma")
    lang_label.grid(row=1,column=0, padx=10,pady=10,sticky="we")
    lang_values=['es-Es','en-US']
    lang_combo=Combobox(config_frame,values=lang_values)
    lang_combo.current(0)
    lang_combo.grid(row=1,column=1, padx=10,pady=10)
    def save_config():
        global api_key ## cambio
        global new_lang ## cambio
        api_key=key_entry.get()
        new_lang=lang_combo.get()
        print(api_key,new_lang)
    save_button=Button(config_frame,text="Guardar", command=save_config)
    save_button.grid(row=2,column=0, padx=10,pady=10)
    cancel_button=Button(config_frame,text="Cancelar",command=config_window.destroy)
    cancel_button.grid(row=2,column=1, padx=10, pady=10)
button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=open_config,
    relief="flat"
)
button_3.place(
    x=661.0,
    y=41.0,
    width=24.0,
    height=24.0
)


canvas.create_text(
    230.0,
    454.0,
    anchor="nw",
    text="Actualizaci√≥n 2023",
    fill="#000000",
    font=("Inter Light", 12 * -1)
)
window.resizable(False, False)
window.mainloop()
